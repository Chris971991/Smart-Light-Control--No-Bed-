blueprint:
  name: Smart Presence Lighting Control (No Bed) - Enhanced v2
  description: >
    # Smart Presence Lighting Control - Enhanced Version 2

    Intelligently manages your lighting based on room occupancy, light levels, and manual controls.
    Works with any combination of motion sensors, occupancy sensors, and illuminance sensors.

    ## Features

    • **Automatic Control** - Turns lights on when dark and someone is present
    
    • **Energy Saving** - Turns lights off when room is vacant
    
    • **Smart Overrides** - Respects when you manually control lights
    
    • **Bright Room Logic** - Clears overrides when turning off lights in well-lit rooms
    
    • **Timeout Protection** - Clears overrides after configurable timeout
    
    • **Vacancy Override** - Optional: Clear overrides after extended vacancy
    
    • **Adaptive Brightness** - Optional brightness adjustment based on time and ambient light
    
    • **Color Temperature Control** - Optional color temperature adjustment throughout the day
    
    • **Smooth Transitions** - Optional fade in/out effects for compatible lights
    
    • **Illuminance Averaging** - Prevents light flapping from momentary light changes
    
    • **Guest Mode** - Special behavior for when you have guests
    
    • **Human-Friendly** - Lights stay on while room is occupied, regardless of brightness
    
    • **Enhanced Performance** - Optimized state checks and reduced processing overhead
    
    • **Improved Debugging** - Structured logs with clear decision trees and performance metrics

    ## Compatible Sensors

    This blueprint works with:
    • Everything Presence One/Light sensors
    • Standard motion/PIR sensors
    • mmWave/radar presence sensors
    • Any illuminance/light level sensor
    • Or combinations of these sensors
    
    ## REQUIRED HELPER ENTITIES

    Before using this blueprint, you MUST create these helper entities.
    
    **IMPORTANT**: All entity IDs must be lowercase! If your room name is "Office", 
    the helpers should use "office" (lowercase) in their entity IDs.
    
    1. `input_boolean.[room_name]_automation_active`
       - Tracks when automation is running an action
       - Example: input_boolean.office_automation_active
    
    2. `input_boolean.[room_name]_manual_override`
       - Tracks when user has manually overridden automation
       - Example: input_boolean.office_manual_override
    
    3. `input_boolean.[room_name]_light_auto_on`
       - Tracks if light was automatically turned on
       - Example: input_boolean.office_light_auto_on
    
    4. `input_datetime.[room_name]_last_automation_action`
       - Stores timestamp of last automation action
       - MUST have both date AND time enabled
       - Example: input_datetime.office_last_automation_action
    
    5. `input_boolean.[room_name]_occupancy_state`
       - Tracks combined occupancy state from all sensors
       - Example: input_boolean.office_occupancy_state
    
    6. `input_text.[room_name]_illuminance_history`
       - Stores recent illuminance readings for averaging
       - Example: input_text.office_illuminance_history
    
    Replace [room_name] with your actual room name in LOWERCASE (e.g., office, bedroom, living_room)
    
    ## Guest Mode
    
    When enabled, guest mode modifies the automation behavior to be more guest-friendly:
    - Lights stay on longer when room is vacant
    - Manual overrides last longer before timing out
    - Less aggressive power saving
    - More forgiving presence detection
    
    Perfect for when you have visitors, parties, or service workers in your home.

  domain: automation
  input:
    room_name:
      name: Room Name
      description: >
        Name of the room used throughout the automation for entity naming and logging.
        You can use any capitalization here (e.g., "Office", "Living Room"), but note that
        all helper entity IDs will be created in lowercase. For example, if you enter "Office",
        the helpers should be created as "input_boolean.office_automation_active", etc.
        Use underscores instead of spaces for multi-word names (e.g., "living_room").
      selector:
        text:
    presence_pir_sensor:
      name: PIR Motion Sensor
      description: >
        Motion sensor that detects immediate movement. This can be any PIR/motion sensor.
        For Everything Presence devices, use binary_sensor.everything_presence_xxx_pir.
        For standard motion sensors, use your motion sensor entity.
      selector:
        entity:
          domain: binary_sensor
          device_class:
            - motion
            - occupancy
            - presence
    presence_mmwave_sensor:
      name: Occupancy Sensor (Optional)
      description: >
        Secondary occupancy sensor that can detect presence even without movement.
        If you only have one motion sensor, you can select the same entity again.
        For Everything Presence devices, use binary_sensor.everything_presence_xxx_occupancy.
        For mmWave/radar sensors, use your occupancy entity.
      default: ""
      selector:
        entity:
          domain: binary_sensor
          device_class:
            - motion
            - occupancy
            - presence
    illuminance_sensor:
      name: Illuminance Sensor
      description: >
        Sensor that measures room brightness in lux (lumens per square meter).
        For Everything Presence devices, use sensor.everything_presence_xxx_illuminance.
        For other light sensors, select any sensor that provides light level readings.
        If you don't have a light sensor, create an input_number helper set to 50 lux.
      selector:
        entity:
          domain:
            - sensor
            - input_number
    light_switch:
      name: Light Switch/Entity
      description: >
        The light switch or light entity that this automation will control.
        Works with both switch.* entities (simple on/off) and light.* entities (supports brightness).
        You can also select a light group to control multiple lights at once.
      selector:
        entity:
          domain:
            - switch
            - light
    dark_threshold:
      name: Dark Threshold
      description: >
        Lux threshold below which the room is considered dark enough to need lights.
        When illuminance falls below this value AND someone is present, lights will
        turn on automatically. Typically 20-50 lux for most rooms.
        MUST be lower than bright threshold!
      default: 30
      selector:
        number:
          min: 0
          max: 499
          unit_of_measurement: lux
          mode: slider
          step: 1
    bright_threshold:
      name: Bright Threshold
      description: >
        Lux threshold above which the room is considered bright (has enough natural light).
        This threshold is important for the "clear override when turning off lights in bright room"
        feature. When you manually turn off lights in a bright room, the override is cleared.
        Usually 150-300 lux is appropriate for most rooms.
        MUST be higher than dark threshold!
      default: 200
      selector:
        number:
          min: 1
          max: 500
          unit_of_measurement: lux
          mode: slider
          step: 1
    extremely_dark_threshold:
      name: Extremely Dark Threshold
      description: >
        Lux threshold below which the room is considered extremely dark (pitch black).
        This allows for more aggressive light control in very dark conditions.
        Usually 1-5 lux for complete darkness.
      default: 3
      selector:
        number:
          min: 0
          max: 20
          unit_of_measurement: lux
          mode: slider
          step: 0.1
    sensor_off_latency_entity:
      name: Sensor Off Latency Entity (Optional)
      description: >
        Entity that provides the sensor's off latency/timeout value in seconds.
        For Everything Presence devices, use number.everything_presence_xxx_occupancy_off_latency.
        For other sensors, leave this blank and use the fixed value below.
      default: ""
      selector:
        entity:
          domain: number
          multiple: false
    fixed_latency_seconds:
      name: Fixed Off Latency (seconds)
      description: >
        Fixed off latency value in seconds, used if sensor_off_latency_entity is not available.
        This is how long after the last detected motion before the sensor reports "no presence".
        Typically 30-120 seconds is appropriate, with 60 being a good default.
      default: 60
      selector:
        number:
          min: 10
          max: 300
          unit_of_measurement: sec
          mode: slider
          step: 10
    vacancy_timeout_multiplier:
      name: Vacancy Timeout Multiplier
      description: >
        Multiplier applied to the sensor off latency to determine true vacancy.
        For example, with a 60s latency and 5× multiplier = 5 minute vacancy timeout.
        Higher values prevent false offs but delay automatic actions.
      default: 5
      selector:
        number:
          min: 1
          max: 30
          mode: slider
          step: 1
    override_behavior:
      name: Override Behavior
      description: >
        Choose how manual overrides should be handled:
        
        **Timeout Only** - Manual overrides are respected until the timeout expires. 
        This gives you complete control - the room could be vacant for hours and your 
        manual choice will be respected.
        
        **Vacancy Can Clear** - Manual overrides can be cleared by extended vacancy.
        This prevents forgotten overrides from keeping lights off when you return to
        a dark room hours later. More convenient but less absolute control.
      default: "timeout_only"
      selector:
        select:
          options:
            - label: "Timeout Only - Full manual control"
              value: "timeout_only"
            - label: "Vacancy Can Clear - Smarter but less control"
              value: "vacancy_clear"
    vacancy_clear_minutes:
      name: Vacancy Clear Time (minutes)
      description: >
        When using "Vacancy Can Clear" mode, how many minutes of vacancy before clearing overrides.
        This is separate from the normal vacancy timeout - it's specifically for clearing manual overrides.
        Typically 30-60 minutes to ensure the room is truly abandoned.
        Only applies when Override Behavior is set to "Vacancy Can Clear".
      default: 45
      selector:
        number:
          min: 10
          max: 120
          unit_of_measurement: min
          mode: slider
          step: 5
    override_timeout_hours:
      name: Override Timeout Hours
      description: >
        Maximum hours a manual override will remain active before being automatically cleared.
        This ensures forgotten overrides don't permanently disable automation.
        Typical values are 2-4 hours for most rooms.
      default: 3
      selector:
        number:
          min: 1
          max: 24
          unit_of_measurement: hours
          mode: slider
          step: 0.5
    enable_adaptive_brightness:
      name: Enable Adaptive Brightness
      description: >
        When enabled, automatically adjusts light brightness based on time of day and ambient light.
        Only works with light.* entities that support brightness control.
        Brightness will be lower at night and higher during the day.
      default: true
      selector:
        boolean:
    enable_color_temperature:
      name: Enable Color Temperature Control
      description: >
        When enabled, automatically adjusts the color temperature of lights throughout the day.
        Cool white during daytime for alertness, warm white in evening for relaxation.
        Only works with lights that support color temperature control.
      default: true
      selector:
        boolean:
    day_color_temp:
      name: Daytime Color Temperature
      description: >
        Color temperature for daytime hours (9 AM - 5 PM).
        Higher values = cooler/bluer light for alertness.
        Typical range: 4000-6500K
      default: 5000
      selector:
        number:
          min: 2700
          max: 6500
          unit_of_measurement: K
          mode: slider
          step: 100
    night_color_temp:
      name: Nighttime Color Temperature
      description: >
        Color temperature for nighttime hours.
        Lower values = warmer/orange light for relaxation.
        Typical range: 2700-3500K
      default: 3000
      selector:
        number:
          min: 2700
          max: 6500
          unit_of_measurement: K
          mode: slider
          step: 100
    enable_transition_effects:
      name: Enable Smooth Transitions
      description: >
        When enabled, lights will fade in/out smoothly instead of turning on/off instantly.
        Only works with light.* entities that support transition effects.
        Adds a pleasant aesthetic but slightly delays the action.
      default: true
      selector:
        boolean:
    transition_time_seconds:
      name: Transition Time (seconds)
      description: >
        How long the fade in/out transition should take when turning lights on or off.
        Only applies if smooth transitions are enabled and the light supports it.
      default: 1.5
      selector:
        number:
          min: 0.5
          max: 5
          unit_of_measurement: sec
          mode: slider
          step: 0.5
    enable_illuminance_averaging:
      name: Enable Illuminance Averaging
      description: >
        When enabled, averages the last 5 light readings to prevent flapping.
        Helps when clouds, shadows, or sensor noise cause rapid light changes.
        Adds stability but slightly delays response to legitimate lighting changes.
      default: true
      selector:
        boolean:
    enable_guest_mode:
      name: Enable Guest Mode
      description: >
        When enabled, the automation becomes more guest-friendly:
        • Lights stay on longer when vacant
        • Manual overrides last longer
        • Less aggressive power saving
        • More forgiving presence detection
        
        Perfect for visitors, parties, or service workers.
      default: false
      selector:
        boolean:
    guest_vacancy_multiplier:
      name: Guest Mode - Vacancy Multiplier
      description: >
        In guest mode, how much longer to wait before turning off lights.
        2.0 = twice as long, 3.0 = three times as long, etc.
        Only applies when guest mode is enabled.
      default: 2.5
      selector:
        number:
          min: 1.5
          max: 5.0
          mode: slider
          step: 0.5
    guest_override_multiplier:
      name: Guest Mode - Override Timeout Multiplier
      description: >
        In guest mode, how much longer manual overrides remain active.
        2.0 = twice as long, 3.0 = three times as long, etc.
        Only applies when guest mode is enabled.
      default: 2.0
      selector:
        number:
          min: 1.5
          max: 5.0
          mode: slider
          step: 0.5
    enable_debug_logs:
      name: Enable Debug Logs
      description: >
        Enable detailed debug logging in Home Assistant. These logs help understand
        the automation's decisions and troubleshoot issues.
        View logs in Settings → System → Logs, filtered for your room name.
      default: false
      selector:
        boolean:

# Variables and state management - ENHANCED v2
variables:
  # Store start time for performance monitoring
  start_time: "{{ now().timestamp() }}"
  
  # Input variables
  room_name: !input room_name
  presence_pir_sensor: !input presence_pir_sensor
  presence_mmwave_sensor: !input presence_mmwave_sensor
  illuminance_sensor: !input illuminance_sensor
  light_switch: !input light_switch
  dark_threshold: !input dark_threshold
  bright_threshold: !input bright_threshold
  extremely_dark_threshold: !input extremely_dark_threshold
  override_timeout_hours: !input override_timeout_hours
  enable_debug_logs: !input enable_debug_logs
  sensor_off_latency_entity: !input sensor_off_latency_entity
  fixed_latency_seconds: !input fixed_latency_seconds
  vacancy_timeout_multiplier: !input vacancy_timeout_multiplier
  enable_adaptive_brightness: !input enable_adaptive_brightness
  enable_color_temperature: !input enable_color_temperature
  day_color_temp: !input day_color_temp
  night_color_temp: !input night_color_temp
  enable_transition_effects: !input enable_transition_effects
  transition_time_seconds: !input transition_time_seconds
  override_behavior: !input override_behavior
  vacancy_clear_minutes: !input vacancy_clear_minutes
  enable_illuminance_averaging: !input enable_illuminance_averaging
  enable_guest_mode: !input enable_guest_mode
  guest_vacancy_multiplier: !input guest_vacancy_multiplier
  guest_override_multiplier: !input guest_override_multiplier
  
  # Helper entity names (forced to lowercase for Home Assistant compatibility)
  automation_active_helper: "input_boolean.{{ room_name | lower }}_automation_active"
  manual_override_helper: "input_boolean.{{ room_name | lower }}_manual_override"
  light_auto_on_helper: "input_boolean.{{ room_name | lower }}_light_auto_on"
  last_automation_action_helper: "input_datetime.{{ room_name | lower }}_last_automation_action"
  occupancy_state_helper: "input_boolean.{{ room_name | lower }}_occupancy_state"
  illuminance_history_helper: "input_text.{{ room_name | lower }}_illuminance_history"
  
  # Determine effective mmWave sensor
  mmwave_sensor: >-
    {% if presence_mmwave_sensor and presence_mmwave_sensor != '' %}
      {{ presence_mmwave_sensor }}
    {% else %}
      {{ presence_pir_sensor }}
    {% endif %}
  
  # Cache entity states for performance
  pir_state: "{{ states(presence_pir_sensor) }}"
  mmwave_state: "{{ states(mmwave_sensor) }}"
  light_state: "{{ states(light_switch) }}"
  illuminance_state: "{{ states(illuminance_sensor) }}"
  
  # Basic state validations
  pir_valid: "{{ pir_state not in ['unknown', 'unavailable', None] }}"
  mmwave_valid: "{{ mmwave_state not in ['unknown', 'unavailable', None] }}"
  light_valid: "{{ light_state not in ['unknown', 'unavailable', None] }}"
  illuminance_valid: "{{ illuminance_state not in ['unknown', 'unavailable', None] }}"
  
  # Core state evaluations
  pir_active: "{{ pir_valid and pir_state == 'on' }}"
  mmwave_active: "{{ mmwave_valid and mmwave_state == 'on' }}"
  someone_present: "{{ pir_active or mmwave_active }}"
  lights_on: "{{ light_valid and light_state == 'on' }}"
  
  # Illuminance with averaging
  illuminance_raw: >-
    {% if illuminance_valid %}
      {{ illuminance_state | float(50) }}
    {% else %}
      50
    {% endif %}
  
  illuminance_history: >-
    {% if states[illuminance_history_helper] %}
      {% set history = states(illuminance_history_helper) %}
      {% if history not in ['unknown', 'unavailable', '', None] %}
        {{ history }}
      {% else %}
        "[]"
      {% endif %}
    {% else %}
      "[]"
    {% endif %}
  
  illuminance: >-
    {% if not enable_illuminance_averaging %}
      {{ illuminance_raw }}
    {% else %}
      {% set history_list = illuminance_history | from_json %}
      {% if history_list | length == 0 %}
        {{ illuminance_raw }}
      {% else %}
        {% set recent = history_list[-4:] + [illuminance_raw] %}
        {{ (recent | sum) / (recent | length) | round(1) }}
      {% endif %}
    {% endif %}
  
  # Light level thresholds
  is_dark: "{{ illuminance < dark_threshold }}"
  is_bright: "{{ illuminance >= bright_threshold }}"
  is_extremely_dark: "{{ illuminance < extremely_dark_threshold }}"
  in_middle_range: "{{ dark_threshold <= illuminance < bright_threshold }}"
  
  # Validate thresholds
  thresholds_valid: "{{ dark_threshold < bright_threshold }}"
  
  # Helper states with validation
  manual_override: "{{ is_state(manual_override_helper, 'on') }}"
  automation_active: "{{ is_state(automation_active_helper, 'on') }}"
  light_was_auto_on: "{{ is_state(light_auto_on_helper, 'on') }}"
  
  # Timestamps for state change tracking
  current_time: "{{ now().timestamp() }}"
  
  light_changed_time: >-
    {% set changed = as_timestamp(states[light_switch].last_changed) %}
    {{ changed if changed else current_time }}
  
  override_changed_time: >-
    {% set changed = as_timestamp(states[manual_override_helper].last_changed) %}
    {{ changed if changed else current_time }}
  
  occupancy_changed_time: >-
    {% set changed = as_timestamp(states[occupancy_state_helper].last_changed) %}
    {{ changed if changed else current_time }}
  
  last_automation_time: >-
    {% set last_action = states(last_automation_action_helper) %}
    {% if last_action not in ['unknown', 'unavailable', '', None] %}
      {% set action_time = as_timestamp(last_action) %}
      {{ action_time if action_time else 0 }}
    {% else %}
      0
    {% endif %}
  
  # Time calculations
  light_changed_seconds_ago: "{{ (current_time - light_changed_time) | round(1) }}"
  override_active_minutes: "{{ ((current_time - override_changed_time) / 60) | round(1) }}"
  room_vacant_minutes: >-
    {% if someone_present %}
      0
    {% else %}
      {{ ((current_time - occupancy_changed_time) / 60) | round(1) }}
    {% endif %}
  time_since_last_automation: "{{ (current_time - last_automation_time) | round(1) }}"
  
  # Recent change detection
  light_recently_changed: "{{ light_changed_seconds_ago < 2 }}"
  override_recently_set: "{{ manual_override and (current_time - override_changed_time) < 5 }}"
  
  # Manual change detection
  is_manual_change: >-
    {% if trigger.platform != 'state' or trigger.entity_id != light_switch %}
      false
    {% elif automation_active %}
      false
    {% elif time_since_last_automation < 1.5 %}
      false
    {% else %}
      true
    {% endif %}
  
  # Trigger analysis
  is_light_trigger: "{{ trigger.platform == 'state' and trigger.entity_id == light_switch }}"
  is_pir_trigger: "{{ trigger.platform == 'state' and trigger.entity_id == presence_pir_sensor }}"
  is_mmwave_trigger: "{{ trigger.platform == 'state' and trigger.entity_id == mmwave_sensor }}"
  is_illuminance_trigger: "{{ trigger.platform == 'state' and trigger.entity_id == illuminance_sensor }}"
  is_periodic_trigger: "{{ trigger.platform == 'time_pattern' }}"
  
  user_turned_on: "{{ is_light_trigger and trigger.to_state.state == 'on' and trigger.from_state.state == 'off' }}"
  user_turned_off: "{{ is_light_trigger and trigger.to_state.state == 'off' and trigger.from_state.state == 'on' }}"
  
  # Automation intent
  auto_would_turn_on: "{{ is_dark and someone_present }}"
  auto_would_turn_off: "{{ not someone_present }}"
  
  # Guest mode adjustments
  effective_vacancy_multiplier: >-
    {{ (vacancy_timeout_multiplier * guest_vacancy_multiplier) if enable_guest_mode else vacancy_timeout_multiplier }}
  
  effective_override_hours: >-
    {{ (override_timeout_hours * guest_override_multiplier) if enable_guest_mode else override_timeout_hours }}
  
  effective_vacancy_clear_minutes: >-
    {{ (vacancy_clear_minutes * guest_vacancy_multiplier) if enable_guest_mode else vacancy_clear_minutes }}
  
  # Override timeout logic with guest mode
  override_timeout_exceeded: "{{ manual_override and (override_active_minutes / 60) > effective_override_hours }}"
  vacancy_clear_triggered: >-
    {{ manual_override and override_behavior == 'vacancy_clear' and room_vacant_minutes >= effective_vacancy_clear_minutes }}
  
  override_should_clear: "{{ override_timeout_exceeded or vacancy_clear_triggered }}"
  
  # Determine clear reason for logging
  override_clear_reason: >-
    {% if override_timeout_exceeded %}
      "timeout ({{ effective_override_hours }}h{{ ' guest mode' if enable_guest_mode else '' }})"
    {% elif vacancy_clear_triggered %}
      "vacancy ({{ room_vacant_minutes | int }}min{{ ' guest mode' if enable_guest_mode else '' }})"
    {% else %}
      "unknown"
    {% endif %}
  
  # Light capabilities
  light_is_dimmable: >-
    {% if light_switch.startswith('light.') %}
      {{ state_attr(light_switch, 'supported_features') is not none }}
    {% else %}
      false
    {% endif %}
  
  light_supports_color_temp: >-
    {% if light_switch.startswith('light.') %}
      {{ state_attr(light_switch, 'min_color_temp_kelvin') is not none }}
    {% else %}
      false
    {% endif %}
  
  # Adaptive brightness calculation with guest mode consideration
  adaptive_brightness: >-
    {% if not enable_adaptive_brightness or not light_is_dimmable %}
      100
    {% else %}
      {% set hour = now().hour %}
      {% set night_hours = hour >= 22 or hour < 6 %}
      {% set evening_hours = hour >= 20 and hour < 22 %}
      {% set morning_hours = hour >= 6 and hour < 8 %}
      
      {% if enable_guest_mode %}
        {# Guest mode: generally brighter #}
        {% if is_extremely_dark %}
          {{ 50 if night_hours else 90 }}
        {% elif is_dark %}
          {% if night_hours %}
            60
          {% elif morning_hours or evening_hours %}
            80
          {% else %}
            100
          {% endif %}
        {% else %}
          100
        {% endif %}
      {% else %}
        {# Normal mode #}
        {% if is_extremely_dark %}
          {{ 30 if night_hours else 80 }}
        {% elif is_dark %}
          {% if night_hours %}
            40
          {% elif morning_hours or evening_hours %}
            70
          {% else %}
            90
          {% endif %}
        {% else %}
          100
        {% endif %}
      {% endif %}
    {% endif %}
  
  # Adaptive color temperature calculation
  adaptive_color_temp: >-
    {% if not enable_color_temperature or not light_supports_color_temp %}
      0
    {% else %}
      {% set hour = now().hour %}
      {% set progress = 0 %}
      {% if 6 <= hour < 9 %}
        {# Morning transition #}
        {% set progress = (hour - 6) / 3 %}
      {% elif 9 <= hour < 17 %}
        {# Daytime #}
        {% set progress = 1 %}
      {% elif 17 <= hour < 21 %}
        {# Evening transition #}
        {% set progress = 1 - ((hour - 17) / 4) %}
      {% else %}
        {# Night #}
        {% set progress = 0 %}
      {% endif %}
      {% set temp_range = day_color_temp - night_color_temp %}
      {% set temp = night_color_temp + (temp_range * progress) %}
      {{ temp | int }}
    {% endif %}
  
  # Sensor latency calculation with guest mode
  sensor_off_latency_seconds: >-
    {% if sensor_off_latency_entity and sensor_off_latency_entity != '' %}
      {% set latency = states(sensor_off_latency_entity) | float(0) %}
      {% set base_latency = latency if latency > 0 else fixed_latency_seconds %}
    {% else %}
      {% set base_latency = fixed_latency_seconds %}
    {% endif %}
    {{ (base_latency * 1.5) if enable_guest_mode else base_latency }}
  
  # Vacancy timeout calculation
  vacancy_timeout_minutes: >-
    {% set timeout = (sensor_off_latency_seconds * effective_vacancy_multiplier) / 60 %}
    {{ [timeout | round(0, 'ceil'), 1] | max | int }}

# Triggers
trigger:
  # State changes
  - platform: state
    entity_id: !input presence_pir_sensor
    id: pir_change
  
  - platform: state
    entity_id: !input presence_mmwave_sensor
    id: mmwave_change
    
  - platform: state
    entity_id: !input illuminance_sensor
    id: illuminance_change
    
  - platform: state
    entity_id: !input light_switch
    id: light_change
    
  - platform: state
    entity_id: sun.sun
    id: sun_change
    
  # Periodic checks
  - platform: time_pattern
    minutes: "/5"
    id: periodic_check

# Conditions
condition:
  # Skip if triggered by empty/invalid entity
  - condition: template
    value_template: >-
      {% if trigger.entity_id is defined and trigger.entity_id == '' %}
        false
      {% else %}
        true
      {% endif %}
  
  # Don't trigger on attribute-only changes
  - condition: template
    value_template: >-
      {{ trigger.id == 'periodic_check' or 
         (trigger.from_state is defined and trigger.to_state is defined and
          trigger.from_state.state != trigger.to_state.state) }}

# Actions
action:
  # Performance tracking start
  - variables:
      action_start_time: "{{ now().timestamp() }}"
  
  # Validate helper entities exist
  - choose:
      - conditions:
          - condition: template
            value_template: >-
              {% set missing = [] %}
              {% if not states[automation_active_helper] %}
                {% set missing = missing + [automation_active_helper] %}
              {% endif %}
              {% if not states[manual_override_helper] %}
                {% set missing = missing + [manual_override_helper] %}
              {% endif %}
              {% if not states[light_auto_on_helper] %}
                {% set missing = missing + [light_auto_on_helper] %}
              {% endif %}
              {% if not states[last_automation_action_helper] %}
                {% set missing = missing + [last_automation_action_helper] %}
              {% endif %}
              {% if not states[occupancy_state_helper] %}
                {% set missing = missing + [occupancy_state_helper] %}
              {% endif %}
              {% if not states[illuminance_history_helper] %}
                {% set missing = missing + [illuminance_history_helper] %}
              {% endif %}
              {{ missing | length > 0 }}
        sequence:
          - service: persistent_notification.create
            data:
              title: "{{ room_name }} Lighting Automation Error"
              message: >-
                Missing required helper entities! Please create:
                {% for helper in missing %}
                - {{ helper }}
                {% endfor %}
                
                Remember: All entity IDs must be lowercase!
              notification_id: "{{ room_name }}_lighting_helper_error"
          - stop: "Missing required helper entities"
  
  # Clear any previous error notifications
  - service: persistent_notification.dismiss
    data:
      notification_id: "{{ room_name }}_lighting_helper_error"
    continue_on_error: true
  
  # Update illuminance history if changed
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ is_illuminance_trigger and enable_illuminance_averaging }}"
        sequence:
          - service: input_text.set_value
            target:
              entity_id: "{{ illuminance_history_helper }}"
            data:
              value: >-
                {% set history = illuminance_history | from_json %}
                {% set new_history = (history[-4:] + [illuminance_raw]) | to_json %}
                {{ new_history }}
  
  # Debug: Initial state logging
  - if:
      - condition: template
        value_template: "{{ enable_debug_logs }}"
    then:
      - service: system_log.write
        data:
          level: warning
          message: >-
            ┌─ {{ room_name | upper }} AUTOMATION START ─────────────────────
            │ Trigger: {{ trigger.id }} ({{ trigger.description | default('manual') }})
            │ Light: {{ 'ON' if lights_on else 'OFF' }} ({{ light_state }})
            │ Presence: {{ 'YES' if someone_present else 'NO' }} (PIR={{ pir_active }}, mmWave={{ mmwave_active }})
            │ Illuminance: {{ illuminance }}lux (raw={{ illuminance_raw }}lux, dark<{{ dark_threshold }}, bright≥{{ bright_threshold }})
            │ Override: {{ 'ACTIVE' if manual_override else 'INACTIVE' }} ({{ override_active_minutes }}min)
            │ Vacancy: {{ room_vacant_minutes }}min
            │ Guest Mode: {{ 'ENABLED' if enable_guest_mode else 'DISABLED' }}
            └─────────────────────────────────────────────────────
  
  # Skip if automation is already active (prevent race conditions)
  - condition: template
    value_template: >-
      {% if trigger.id != 'light_change' and automation_active %}
        {% set active_time = as_timestamp(states[automation_active_helper].last_changed) %}
        {% if active_time %}
          {{ (current_time - active_time) > 0.5 }}
        {% else %}
          true
        {% endif %}
      {% else %}
        true
      {% endif %}
  
  # Update occupancy state helper if changed
  - choose:
      - conditions:
          - condition: template
            value_template: >-
              {{ states[occupancy_state_helper] and 
                 someone_present != is_state(occupancy_state_helper, 'on') }}
        sequence:
          - service: "input_boolean.turn_{{ 'on' if someone_present else 'off' }}"
            target:
              entity_id: "{{ occupancy_state_helper }}"
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: "[{{ room_name | upper }}] Occupancy state updated: {{ 'OCCUPIED' if someone_present else 'VACANT' }}"
  
  # Override clearing logic
  - choose:
      - conditions:
          - condition: template
            value_template: "{{ manual_override and override_should_clear }}"
        sequence:
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ manual_override_helper }}"
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ light_auto_on_helper }}"
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: warning
                  message: >-
                    ┌─ {{ room_name | upper }} OVERRIDE CLEARED ─────────────────
                    │ Reason: {{ override_clear_reason }}
                    │ Was active for: {{ override_active_minutes }} minutes
                    └─────────────────────────────────────────────────────
          - delay:
              milliseconds: 100
          - service: automation.trigger
            target:
              entity_id: "{{ this.entity_id }}"
            data:
              skip_condition: false
          - stop: "Override cleared - retriggering automation"
  
  # Check for active manual override
  - if:
      - condition: template
        value_template: "{{ manual_override and not is_light_trigger }}"
    then:
      - if:
          - condition: template
            value_template: "{{ enable_debug_logs }}"
        then:
          - service: system_log.write
            data:
              level: info
              message: >-
                [{{ room_name | upper }}] Manual override active - skipping automation
                │ Would have: {{ 'turned ON' if (auto_would_turn_on and not lights_on) else 'turned OFF' if (auto_would_turn_off and lights_on) else 'done nothing' }}
      - stop: "Manual override active"
  
  # Main automation logic
  - choose:
      # Handle manual light changes
      - conditions:
          - condition: template
            value_template: "{{ is_manual_change }}"
        sequence:
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: warning
                  message: >-
                    ┌─ {{ room_name | upper }} MANUAL CHANGE DETECTED ────────────
                    │ Action: Turned {{ 'ON' if user_turned_on else 'OFF' }}
                    │ Auto would: {{ 'turn ON' if auto_would_turn_on else 'turn OFF' if auto_would_turn_off else 'do nothing' }}
                    │ Illuminance: {{ illuminance }}lux
                    │ Presence: {{ 'YES' if someone_present else 'NO' }}
                    └─────────────────────────────────────────────────────
          
          # Determine if override should be set or cleared
          - choose:
              # Clear override - user turned off in bright room
              - conditions:
                  - condition: template
                    value_template: "{{ user_turned_off and is_bright and someone_present }}"
                sequence:
                  - service: input_boolean.turn_off
                    target:
                      entity_id: "{{ manual_override_helper }}"
                  - delay:
                      milliseconds: 100
                  - if:
                      - condition: template
                        value_template: "{{ enable_debug_logs }}"
                    then:
                      - service: system_log.write
                        data:
                          level: info
                          message: "[{{ room_name | upper }}] Override cleared - lights off in bright room"
              
              # Clear override - user action matches automation intent
              - conditions:
                  - condition: template
                    value_template: >-
                      {{ (user_turned_on and auto_would_turn_on) or 
                         (user_turned_off and auto_would_turn_off) }}
                sequence:
                  - service: input_boolean.turn_off
                    target:
                      entity_id: "{{ manual_override_helper }}"
                  - if:
                      - condition: template
                        value_template: "{{ enable_debug_logs }}"
                    then:
                      - service: system_log.write
                        data:
                          level: info
                          message: "[{{ room_name | upper }}] Override cleared - action matches automation"
              
              # Set override - user action conflicts with automation
              - conditions:
                  - condition: template
                    value_template: >-
                      {% set auto_on_recent = false %}
                      {% if is_state(light_auto_on_helper, 'on') and user_turned_on %}
                        {% set auto_on_changed = as_timestamp(states[light_auto_on_helper].last_changed) %}
                        {% if auto_on_changed %}
                          {% set age = current_time - auto_on_changed %}
                          {% set auto_on_recent = age < 5 %}
                        {% endif %}
                      {% endif %}
                      
                      {% set threshold_gap = bright_threshold - dark_threshold %}
                      {% set very_narrow_range = threshold_gap <= 10 %}
                      {% set somewhat_dark = illuminance < (dark_threshold * 1.5) %}
                      {% set near_dark_threshold = (illuminance - dark_threshold)|abs < 2 %}
                      {% set buffer_zone = illuminance < (dark_threshold + (threshold_gap * 0.3)) %}
                      
                      {% set classic_conflict = (user_turned_on and not auto_would_turn_on) or 
                                                (user_turned_off and auto_would_turn_on) %}
                      {% set edge_case_off = user_turned_off and someone_present and 
                                              (somewhat_dark or buffer_zone or near_dark_threshold) %}
                      {% set narrow_range_override = very_narrow_range and in_middle_range and 
                                                      (user_turned_on or user_turned_off) %}
                      {% set fighting_automation = user_turned_off and light_was_auto_on and someone_present %}
                      {% set extreme_override = user_turned_off and is_extremely_dark and someone_present %}
                      
                      {{ not auto_on_recent and (classic_conflict or edge_case_off or narrow_range_override or 
                        fighting_automation or extreme_override) }}
                sequence:
                  - service: input_boolean.turn_on
                    target:
                      entity_id: "{{ manual_override_helper }}"
                  - delay:
                      milliseconds: 100
                  - if:
                      - condition: template
                        value_template: "{{ enable_debug_logs }}"
                    then:
                      - service: system_log.write
                        data:
                          level: info
                          message: >-
                            [{{ room_name | upper }}] Manual override SET
                            │ Reason: {% if (user_turned_on and not auto_would_turn_on) or (user_turned_off and auto_would_turn_on) %}Conflicts with automation{% elif user_turned_off and someone_present and is_dark %}Wants dark while present{% elif user_turned_off and light_was_auto_on %}Fighting automation{% elif user_turned_off and is_extremely_dark %}Extreme darkness override{% elif very_narrow_range and in_middle_range %}Narrow threshold range{% else %}User preference{% endif %}
          
          # Clear auto-on flag
          - service: input_boolean.turn_off
            target:
              entity_id: "{{ light_auto_on_helper }}"
          
          # Stop if override was set
          - condition: template
            value_template: "{{ not manual_override }}"
      
      # Automatic light control
      - conditions:
          - condition: template
            value_template: "{{ not manual_override and not light_recently_changed }}"
        sequence:
          # Double-check override state
          - condition: template
            value_template: "{{ is_state(manual_override_helper, 'off') }}"
          
          - if:
              - condition: template
                value_template: "{{ enable_debug_logs }}"
            then:
              - service: system_log.write
                data:
                  level: info
                  message: >-
                    [{{ room_name | upper }}] Automatic control evaluating...
                    │ Should turn {{ 'ON' if (auto_would_turn_on and not lights_on) else 'OFF' if (auto_would_turn_off and lights_on) else 'nothing' }}
          
          - choose:
              # Turn lights ON
              - conditions:
                  - condition: template
                    value_template: "{{ auto_would_turn_on and not lights_on }}"
                sequence:
                  # Set automation active
                  - service: input_boolean.turn_on
                    target:
                      entity_id: "{{ automation_active_helper }}"
                  
                  # Record action time
                  - service: input_datetime.set_datetime
                    target:
                      entity_id: "{{ last_automation_action_helper }}"
                    data:
                      datetime: "{{ now() }}"
                  
                  # Final safety check
                  - condition: template
                    value_template: >-
                      {{ is_dark and someone_present and 
                         is_state(light_switch, 'off') and 
                         is_state(manual_override_helper, 'off') }}
                  
                  # Turn on light with all features
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ light_is_dimmable }}"
                        sequence:
                          - service: light.turn_on
                            target:
                              entity_id: "{{ light_switch }}"
                            data: >-
                              {% set data = {'brightness_pct': adaptive_brightness} %}
                              {% if enable_color_temperature and light_supports_color_temp and adaptive_color_temp > 0 %}
                                {% set data = dict(data, **{'kelvin': adaptive_color_temp}) %}
                              {% endif %}
                              {% if enable_transition_effects %}
                                {% set data = dict(data, **{'transition': transition_time_seconds}) %}
                              {% endif %}
                              {{ data }}
                    default:
                      - service: homeassistant.turn_on
                        target:
                          entity_id: "{{ light_switch }}"
                  
                  # Set auto-on flag
                  - service: input_boolean.turn_on
                    target:
                      entity_id: "{{ light_auto_on_helper }}"
                  
                  # Clear automation active
                  - delay:
                      seconds: "{{ transition_time_seconds if enable_transition_effects else 0.1 }}"
                  - service: input_boolean.turn_off
                    target:
                      entity_id: "{{ automation_active_helper }}"
                  
                  - if:
                      - condition: template
                        value_template: "{{ enable_debug_logs }}"
                    then:
                      - service: system_log.write
                        data:
                          level: warning
                          message: >-
                            ┌─ {{ room_name | upper }} LIGHTS TURNED ON ──────────────────
                            │ Brightness: {{ adaptive_brightness }}%
                            │ Color Temp: {{ adaptive_color_temp }}K{{ ' (enabled)' if (enable_color_temperature and light_supports_color_temp) else ' (disabled)' }}
                            │ Transition: {{ transition_time_seconds if enable_transition_effects else 'instant' }}s
                            │ Guest Mode: {{ 'YES' if enable_guest_mode else 'NO' }}
                            └─────────────────────────────────────────────────────
              
              # Turn lights OFF
              - conditions:
                  - condition: template
                    value_template: "{{ auto_would_turn_off and lights_on }}"
                sequence:
                  # Set automation active
                  - service: input_boolean.turn_on
                    target:
                      entity_id: "{{ automation_active_helper }}"
                  
                  # Record action time
                  - service: input_datetime.set_datetime
                    target:
                      entity_id: "{{ last_automation_action_helper }}"
                    data:
                      datetime: "{{ now() }}"
                  
                  # Final safety check
                  - condition: template
                    value_template: >-
                      {{ not someone_present and is_state(light_switch, 'on') }}
                  
                  # Turn off light
                  - choose:
                      - conditions:
                          - condition: template
                            value_template: "{{ light_is_dimmable and enable_transition_effects }}"
                        sequence:
                          - service: light.turn_off
                            target:
                              entity_id: "{{ light_switch }}"
                            data:
                              transition: "{{ transition_time_seconds }}"
                    default:
                      - service: homeassistant.turn_off
                        target:
                          entity_id: "{{ light_switch }}"
                  
                  # Clear auto-on flag
                  - service: input_boolean.turn_off
                    target:
                      entity_id: "{{ light_auto_on_helper }}"
                  
                  # Clear automation active
                  - delay:
                      seconds: "{{ transition_time_seconds if enable_transition_effects else 0.1 }}"
                  - service: input_boolean.turn_off
                    target:
                      entity_id: "{{ automation_active_helper }}"
                  
                  - if:
                      - condition: template
                        value_template: "{{ enable_debug_logs }}"
                    then:
                      - service: system_log.write
                        data:
                          level: warning
                          message: >-
                            ┌─ {{ room_name | upper }} LIGHTS TURNED OFF ─────────────────
                            │ Reason: Room vacant ({{ vacancy_timeout_minutes }}min timeout{{ ', guest mode' if enable_guest_mode else '' }})
                            │ Transition: {{ transition_time_seconds if enable_transition_effects else 'instant' }}s
                            └─────────────────────────────────────────────────────
  
  # Enhanced decision summary
  - if:
      - condition: template
        value_template: "{{ enable_debug_logs }}"
    then:
      - service: system_log.write
        data:
          level: info
          message: >-
            [{{ room_name | upper }}] DECISION SUMMARY
            ├─ Trigger: {{ trigger.id }}
            ├─ Presence: {{ 'YES' if someone_present else 'NO' }} (PIR={{ pir_active }}, mmWave={{ mmwave_active }})
            ├─ Light Level: {{ illuminance }}lux ({{ 'Dark' if is_dark else 'Bright' if is_bright else 'Medium' }})
            ├─ Override: {{ 'ACTIVE' if manual_override else 'INACTIVE' }}
            ├─ Guest Mode: {{ 'ENABLED' if enable_guest_mode else 'DISABLED' }}
            ├─ Action Taken: {% if lights_on != (is_state(light_switch, 'on')) %}Light {{ 'turned ON' if is_state(light_switch, 'on') else 'turned OFF' }}{% else %}No change{% endif %}
            ├─ Execution Time: {{ ((now().timestamp() - action_start_time) * 1000) | round(1) }}ms
            └─ Total Time: {{ ((now().timestamp() - start_time) * 1000) | round(1) }}ms

mode: queued
max: 2
max_exceeded: warning